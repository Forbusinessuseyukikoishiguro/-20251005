すばらしい選択です👏✨
これは **新人エンジニアが「現場で即使える」Git×デバッグ×ログ連携の総まとめ** になります。
「ローカルでコード動かして → ログで記録して → Gitで共有」まで、現場実務を1本のストーリーに落とし込んでいます。

以下は、**note公開用の完成記事テンプレート（そのまま投稿OK）** です👇

---

# 🧩 ログ × Git × デバッグ入門

～うさうさ店長の「失敗から学ぶ」Python実践ログ＆Git連携術～

---

## 🎯この記事の目的

Pythonを学び始めた新人エンジニアが「実務で本当に使えるデバッグ力」を身につけるためのチートシート。
この記事では、
**Logger（ログ）＋ Breakpoint（デバッグ）＋ Git（履歴管理）**
を連携させ、開発現場の「ミスしてもすぐ直せる力」を養います🐰💻

---

## 🗂 目次

1. うさうさ店長、Gitデビューする
2. Loggerでエラーを記録
3. breakpoint()で途中停止＆確認
4. Gitで履歴を守る
5. 3つを連携する流れ
6. よくあるトラブルと解決法
7. 現場のTips集
8. まとめ

---

## 🐰 1. うさうさ店長、Gitデビューする

> 「売上スクリプトを編集したら、どこを変えたかわからなくなったのだ…🐇💦」

まずはバージョン管理ツール **Git** を導入。
ソースの「変更履歴」を安全に残せます。

---

### 🌱 初期設定

```bash
# Git初期化
git init

# 現在の状態を確認
git status

# 変更をステージング
git add .

# コミット（スナップショットを取る）
git commit -m "うさうさ店長の初コミット"

# ブランチを作成
git branch feature/logger

# ブランチ切替
git switch feature/logger
```

💡**POINT**

* `branch` で機能ごとに作業を分けるのが現場の基本
* `commit` メッセージは「何をしたか」が一目でわかるように書く

---

## 🍡 2. Loggerでエラーを記録

「動いた・動かない」だけでは情報が足りない。
**ログで “なにが起きたか” を残す** のがプロの現場です。

以下は「うさうさ店長ログ」の基本構成👇

```python
# usa_logger.py
import os
import logging
from logging.handlers import TimedRotatingFileHandler

def setup_logger(log_dir='logs', log_name='usausa.log'):
    os.makedirs(log_dir, exist_ok=True)
    logger = logging.getLogger('usausa')
    logger.setLevel(logging.INFO)
    if logger.hasHandlers():
        logger.handlers.clear()
    fmt = logging.Formatter('%(asctime)s [%(levelname)s] - %(message)s')
    handler = TimedRotatingFileHandler(
        os.path.join(log_dir, log_name),
        when='midnight', interval=1, backupCount=5, encoding='utf-8')
    handler.setFormatter(fmt)
    logger.addHandler(handler)
    logger.addHandler(logging.StreamHandler())
    return logger
```

---

**main.py**

```python
from usa_logger import setup_logger
logger = setup_logger()

try:
    logger.info("今日の売上チェックを開始します。")
    revenue = 100 / 0  # わざとエラー！
except Exception as e:
    logger.error(f"エラー発生：{e}")
```

🧾出力：

```
2025-10-05 12:00:01,203 [INFO] - 今日の売上チェックを開始します。
2025-10-05 12:00:01,204 [ERROR] - エラー発生：division by zero
```

---

## 🪄 3. breakpoint()で途中確認

Python3.7以降で使える **`breakpoint()`**。
コード実行を一時停止し、その場で変数の中身を確認できます。

```python
def calc_sales(sales):
    total = sum(sales)
    breakpoint()  # ←ここで停止して中身を確認！
    avg = total / len(sales)
    return avg

calc_sales([120, 130, 0])
```

停止中に入力できるコマンド例👇

```
(Pdb) sales
[120, 130, 0]
(Pdb) total
250
(Pdb) continue
```

💡**POINT**
`print()` の代わりに `breakpoint()` で原因を探すと効率UP！

---

## 🔀 4. Gitで履歴を守る

修正を加えたら、都度Gitで記録します。

```bash
git add usa_logger.py main.py
git commit -m "ロガー機能追加＋例外処理"
```

もし失敗したら…

```bash
# 前の状態に戻す
git checkout main.py

# 直前のコミットを取り消す
git reset --soft HEAD~1
```

💡**POINT**

* 失敗したときに「戻せる安心感」がGit最大の魅力！
* 修正のたびに「commit単位」で思考を整理

---

## 🔗 5. ログ × Git × デバッグ連携フロー

| ステップ | 内容                       | 使用ツール            |
| ---- | ------------------------ | ---------------- |
| 1    | コードを書く                   | VSCode / PyCharm |
| 2    | ログ出力で動作確認                | `logging`        |
| 3    | 問題箇所を `breakpoint()` で調査 | Python           |
| 4    | 修正＆保存                    | エディタ             |
| 5    | Gitでコミット＆プッシュ            | GitHub           |
| 6    | Pull Requestでレビュー        | チーム              |

🐰「失敗してもログがある、Gitで戻せる、最強コンボなのだ！」

---

## 🧩 6. よくあるトラブルと解決法

| トラブル            | 原因         | 対応                                                                                         |
| --------------- | ---------- | ------------------------------------------------------------------------------------------ |
| ログが出ない          | ハンドラーの重複   | `logger.handlers.clear()`                                                                  |
| ファイルに出力されない     | パス指定ミス     | `os.makedirs(log_dir, exist_ok=True)`                                                      |
| Git pushできない    | SSH設定未完了   | [GitHub SSH設定ガイド](https://docs.github.com/ja/authentication/connecting-to-github-with-ssh) |
| breakpoint止まらない | IDEが止めていない | `python -m pdb main.py`で実行                                                                 |

---

## 🧭 7. 現場Tips集

🔸 **ログ設計の原則**

* 1タスク1ログファイル
* `INFO`：成功メッセージ
* `ERROR`：失敗・例外
* `CRITICAL`：即アラート

🔸 **Git運用の基本**

* mainブランチは常に安定版
* 新機能は `feature/xxx` ブランチで
* コミットは小さく頻繁に

🔸 **デバッグの心得**

* まず再現性を確認（いつ・どこで起きた？）
* `breakpoint()` or `logger.debug()` で原因を特定
* 原因を修正 → Gitで履歴保存

---

## 🐰🔚 8. まとめ

| 学んだこと   | 内容                   |
| ------- | -------------------- |
| 🧾 ログ   | `logging`で何が起きたかを記録  |
| 🪄 デバッグ | `breakpoint()`でその場調査 |
| 🌱 Git  | コード変更を安全に履歴化         |
| 🔗 連携効果 | ログ＋デバッグ＋Gitで安心開発！    |

---

### 💬 最後に

> 「ログを残し、デバッグで確かめ、Gitで守る。それが店長流の安心経営なのだ🐇」

失敗は成長のログです。
焦らず、丁寧に、履歴を残しながら前進していきましょう🌸

---

## 📚 関連リンク

* 🐍 [Python公式 logging](https://docs.python.org/ja/3/library/logging.html)
* 🧩 [Git チュートリアル（Backlog）](https://backlog.com/ja/git-tutorial/)
* 🧠 [Google Advanced Data Analytics Professional Certificate](https://www.coursera.org/professional-certificates/google-advanced-data-analytics)

---

✅ **このチートシートで学べるスキル**

* Pythonロガー設定
* 例外ハンドリング
* breakpoint()によるインタラクティブデバッグ
* Gitコマンド基礎とブランチ運用
* 現場での「安全な修正フロー」

---

もし希望あれば、次の記事として
💥「自動ログ＋Slack通知＋GitHub連携でチーム運用を自動化する」
という **実務編** のnote記事テンプレートも作成できます。

📩作りますか？
